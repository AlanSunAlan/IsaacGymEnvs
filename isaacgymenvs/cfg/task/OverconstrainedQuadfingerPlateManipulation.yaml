name: OverconstrainedQuadfingerPlateManipulation

physics_engine: ${..physics_engine}

env:
  aggregate_mode: True

  control_decimation: 1
  envSpacing: 1.0

  numEnvs: ${resolve_default:16384,${...num_envs}}

  episodeLength: 750

  clipObservations: 5.0
  clipActions: 1.0

  task_difficulty: 3
  enable_ft_sensors: false
  asymmetric_obs: false
  normalize_obs: true

  apply_safety_damping: true
  command_mode: torque
  normalize_action: true
  cube_obs_keypoints: true
  reset_distribution:
    object_initial_state:
      type: random
    robot_initial_state:
      dof_pos_stddev: 0.4
      dof_vel_stddev: 0.2
      type: default


manipulation:
  reward_weight:
    distance_weight: -2
    yaw_weight: -1

sim:
  dt: 0.02
  substeps: 4
  up_axis: z
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity:
  - 0.0
  - 0.0
  - -9.81
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 0
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.5
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

module:
  # Folder that containing the meshes and urdf files
  asset_folder: "../assets/"
  # Name of the robot urdf file
  robot_urdf_name: "module/quadfinger.urdf"
  num_modules: 4 # the number of modules used in the robot
  prefix_list: [0,1,2,3]
  fix_base: True # if the robot base link should be fixed (i.e. for a 
            # quadruped robot, it should set to False)
  default_world_position: [0,0,0.3] # Default position for the whole robot
  default_world_orientation: [0, 0, 0, 1] # Default orientation in quaternion form: x, y, z, w

  control:
    # a list defining the parameters for each module
    # Must be in the size of:
    # (1) 3 if the parameters should be the same for every module
    # (2) num_modules to set each module seperately
    stiffness: [1.2, 1.2, 1.2]
    damping: [0.06, 0.06, 0.06]
    max_joint_vel: [3, 3, 3] # maximum joint velocities in rad/s
    joint_lower: [-3.14, -1.57, 0.5236]
    joint_upper: [3.14, 1.57, 2.4086] # Upper limit for the joint angles in rad
    joint_torque_limit: [5,5,9] # Maximum joint torque in N*m
    default_joint_positions: [2.6, -1.57, 2.3] # Default joint angles in rad
  asset_options:
    use_physx_armature: True
    thickness: 0.001
    vhacd_enabled: True
    vhacd_params_resolution: 20000
    vhacd_params_concavity: 0.0025
    vhacd_params_alpha: 0.04
    vhacd_params_beta: 1.0
    vhacd_params_convex_hull_downsampling: 4
    vhacd_params_max_num_vertices_per_ch: 128

  observations:
    enable_tip_obs: False
    #tip_position_lower: # Size: 3
    #tip_position_upper:
    #tip_vel_lower: # Linear velocity limit, size: 3
    #tip_vel_upper: 

task:
  randomize: True
  randomization_params:
    frequency: 750   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      range_correlated: [0, .000 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      # schedule_steps: 40000
    actions:
      range: [0., .02]
      range_correlated: [0, .01] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000
    sim_params:
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        # schedule_steps: 40000
    actor_params:
      robot:
        color: True
        dof_properties:
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
